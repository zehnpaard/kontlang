(define reify
  (macro [expr]
    (reset
      (let [result expr]
        (fn [state] (cons result state))))))

(define reflect
  (letfn [reflect [f]
    (shift [k]
      (fn [state]
        (let* [(val-state (f state))
               (val (car val-state))
               (state1 (cdr val-state))]
          ((k val) state1))))]
    reflect))

(define get
  (letfn [get []
    (reflect
      (fn [state] (cons state state)))]
    get))

(define put
  (letfn [put [val]
    (reflect
      (fn [state] (cons nil val)))]
    put))

(define run_state
  (letfn [run_state [m state] (m state)]
    run_state))